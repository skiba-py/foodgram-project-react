# Generated by Django 3.2 on 2023-09-26 06:45

import core.validators
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Обязательно для заполнения.",
                        max_length=256,
                        unique=True,
                        verbose_name="Электронная почта",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Обязательно для заполнения.",
                        max_length=32,
                        unique=True,
                        validators=[
                            core.validators.MinLenValidator(
                                field="username", min_len=3
                            ),
                            django.core.validators.RegexValidator(
                                code="invalid_username",
                                message="Не должен содержать спецсимволы",
                                regex="^[\\w.@+-]+\\Z",
                            ),
                        ],
                        verbose_name="Уникальное имя пользователя",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Обязательно для заполнения.",
                        max_length=32,
                        validators=[
                            core.validators.StrValidator(
                                field="Имя",
                                first_regex="[^а-яёА-ЯЁ -]+",
                                second_regex="[^a-zA-Z -]+",
                            )
                        ],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Обязательно для заполнения.",
                        max_length=32,
                        validators=[
                            core.validators.StrValidator(
                                field="Фамилия",
                                first_regex="[^а-яёА-ЯЁ -]+",
                                second_regex="[^a-zA-Z -]+",
                            )
                        ],
                        verbose_name="Фамилия",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="Придумайте пароль.",
                        max_length=128,
                        verbose_name="Пароль",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активирован"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "ordering": ("username",),
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Subscriptions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата подписки"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор рецепта",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscribers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Подписчики",
                    ),
                ),
            ],
            options={
                "verbose_name": "Подписка",
                "verbose_name_plural": "Подписки",
            },
        ),
        migrations.AddConstraint(
            model_name="subscriptions",
            constraint=models.UniqueConstraint(
                fields=("author", "user"), name="\nПовторная подписка\n"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriptions",
            constraint=models.CheckConstraint(
                check=models.Q(
                    _negated=True, author=django.db.models.expressions.F("user")
                ),
                name="\nНельзя подписаться на себя\n",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(username__length__gte=3),
                name="\nusername is too short\n",
            ),
        ),
    ]
